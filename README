  Programul decodeaza o serie de siruri codificate prin diferite metode criptografice.

  Task1 se bazeaza pe metoda de criptare care realieaza operatia XOR intre doua siruri de octeti.
  Pentru acest subpunct am implementat o functie (xor_strings) care primeste mesajul criptat si cheia folosita
la criptare, ambele in reprezentare binara, si decodeaza mesajul in-place (mesajul decriptat suprascrie mesajul criptat).
  Functia realizeaza acest lucru astfel: se realizeaza operatie XOR intre fiecare octet din mesaj cu octetul corespondent
din cadrul cheii, cheia avand aceeasi dimensiune cu mesajul.

  Task2 se bazeaza pe metoda de criptare care foloseste rezultatul criptarii unui bloc de date in criptarea urmatorului
bloc, adica efectueaza operatia XOR intre rezultatul respectiv si blocul ce urmeaza a fi criptat.
  Pentru decodificarea mesajului am implementat o functie (rolling_xor) care efectueaza pasii in mod invers algoritmului
de criptare: pornind de la ultimul octet, se realizeaza operatia xor intre octetul anterior si octetul curent, rezultatul
reprezentand octetul decriptat care va suprascrie octetul criptat. Procedura se repeta pana cand se ajunge la inceputul
sirului care stocheaza mesajul.

  Task3 este similar cu Task1, diferit fiind modul de reprezentare a datelor care acum sunt caractere hexazecimale (atat
mesajul cat si cheia folosita la criptare).
  Pentru decodificarea mesajului am implementat functia (xor_hex_strings) care face conversia datelor din caractere
hexazecimale in forma binara si apoi foloseste functia de la task1 pentru formarea rezultatului. Am parcurs sirul care
contine mesajul din 2 in 2 octeti, prelucrand cei 2 octeti dintre ei astfel: am creat un numar in forma zecimala (primul
octet inmultit cu 16, la care se aduna cel de-al doilea) si am adaugat rezultatele octet langa octet in sirul care contine
mesajul criptat. Aceeasi procedura am aplicat-o si in cazul sirului care contine cheia in forma criptata. Dupa aducerea
celor doua siruri in forma binara, cerinta este similara cu Task1.

  Task5 foloseste o cheie de un octet din care se obtine, prin repetare, o cheie de dimensiunea mesajului si se bazeaza pe
metoda de criptare care realizeaza operatia XOR intre mesaj si cheia rezultata.
  Pentru decodificarea mesajului a fost necesara gasirea octetului care sta la baza formarii cheii. Acesta contine
valoarea 142. Am realizat operatia XOR intre fiecare octet din mesaj cu acest octet iar rezultatul l-am suprascris peste
mesajul criptat. Functia (bruteforce_singlebyte_xor) returneaza mesajul decriptat precum si valoarea cheii folosita pentru
criptare.

  Task6 se bazeaza pe metoda de criptare care inlocuieste fiecare litera intalnita in mesaj cu litera care se afla la un
anumit offset dupa aceasta.
  Pentru decodificarea mesajului am implementat o functie (decode_vigenere) care primeste mesajul criptat si cheia folosita 
la criptare. Cheia este formata dintr-un sir de caractere alfabetice iar offsetul este dat de pozitia unei litere in
alfabet. Orice caracter non-alfabetic din stringul de intrare nu sufera transformari de rotatie si nu se contorizeaza la
incrementarea indicelui din cheie insa se va transpune nemodificat in stringul de iesire. Pentru decodificarea unui
caracter alfabetic din mesaj, am scazut din acesta offsetul respectiv, iar pentru cazul in care rezultatul scaderii ar fi
returnat un caracter non-alfabetic am facut o serie de calcule astfel incat rezultatul sa ramana un caracter alfabetic
(altfel spus, inainte de litera 'a' sa fie litera 'z' si sa scad din offsetul ramas astfel incat sa ajung la caracterul
dorit - decodificat).
